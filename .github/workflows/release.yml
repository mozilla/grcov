name: Release
on:
  push:
    tags:
      - v*.*.*
  pull_request:
jobs:
  release:
    name: Build release artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            features: []
          - os: macos-latest
            target: aarch64-apple-darwin
            features: []
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: []
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            features: []
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            features: ["tc"]
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            features: []
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            features: []
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            features: []
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            features: []
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Rust
        run: rustup target add ${{ matrix.target }}
      - name: Install additional toolchains
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          set -x
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu)
              ;;
            x86_64-unknown-linux-musl)
              sudo apt-get update
              sudo apt-get install -y musl-tools
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu

              echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config
              echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config
              ;;
            aarch64-unknown-linux-musl)
              mkdir -p $HOME/.local

              curl -o /tmp/musl.tgz https://musl.cc/aarch64-linux-musl-cross.tgz
              tar -xzf /tmp/musl.tgz -C $HOME/.local
              echo "$HOME/.local/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

              echo '[target.aarch64-unknown-linux-musl]' >> .cargo/config
              echo 'linker = "aarch64-linux-musl-gcc"' >> .cargo/config
              ;;
          esac
      - name: Install TCMalloc
        if: contains(matrix.features, 'tc') && matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgoogle-perftools-dev
      - name: Configure cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: release-${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --release --locked --target ${{ matrix.target }}${{ toJson(matrix.features) != '[]' && format(' --features {0}', join(matrix.features, ',')) || '' }}
      - name: Strip binary
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          set -x
          strip="strip"
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu)
              ;;
            x86_64-unknown-linux-musl)
              ;;
            aarch64-unknown-linux-gnu)
              strip=aarch64-linux-gnu-strip
              ;;
            aarch64-unknown-linux-musl)
              strip=aarch64-linux-musl-strip
              ;;
          esac

          ${strip} target/${{ matrix.target }}/release/grcov
      - name: Package (unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          set -x
          rm -rf target/dist
          mkdir target/dist
          cd target/${{ matrix.target }}/release
          tar cjf ../../dist/grcov-${{ matrix.target }}${{ toJson(matrix.features) != '[]' && format('-{0}', join(matrix.features, '-')) || '' }}.tar.bz2 grcov
      - name: Package (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          if (Test-Path target/dist) { rm -Recurse -Force target/dist }
          mkdir target/dist
          cd target/${{ matrix.target }}/release
          7z a ../../dist/grcov-${{ matrix.target }}${{ toJson(matrix.features) != '[]' && format('-{0}', join(matrix.features, '-')) || '' }}.zip grcov.exe
      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.target }}${{ toJson(matrix.features) != '[]' && format('-{0}', join(matrix.features, '-')) || '' }}
          path: target/dist/*
